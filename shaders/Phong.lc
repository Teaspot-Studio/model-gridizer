module Phong(
    renderPhong
  ) where

import Common

renderPhong (modelMat :: Mat 4 4 Float)
            (viewMat :: Mat 4 4 Float)
            (projMat :: Mat 4 4 Float)
            (lightPos :: Vec 3 Float) -- world space
            (prims :: PrimitiveStream Triangle (Position, Normal))

    = prims
    & mapPrimitives transform
    & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth, Smooth, Smooth)
    & mapFragments enlight
  where
    mv = modelMat .*. viewMat
    mvp = transpose $ mv .*. projMat -- loaded matricies are in OpenGL format, need transpose
    viewmatInvT = inv mv

    transform :: (Position, Normal) -> (PositionHomo, Position, Normal, Direction, Direction)
    transform (p,n) = (pproj, pworld, normalCamspace, eyeDirCamspace, lightDirCamspace)
      where pproj = mvp *. homonize p
            pworld = unhomonize $ transpose modelMat *. homonize p
            pcam = unhomonize $ (transpose $ modelMat .*. viewMat) *. homonize p
            eyeDirCamspace = pcam *! (-1)
            lightPosCamspace = unhomonize $ transpose viewMat *. homonize lightPos
            lightDirCamspace = lightPosCamspace + eyeDirCamspace
            normalCamspace = unhomonize $ viewmatInvT *. homonize n

    enlight :: (Position, Normal, Direction, Direction) -> Color
    enlight (pworld, normalCamspace, eyeDirCamspace, lightDir) = homonize colorLinear
      where 
        diffuseColor = V3 0.6 0.6 0.6
        ambientColor = diffuseColor *! 0.1
        specColor = V3 1 1 1
        shininess = 64.0

        lightPower = 40
        linearFade = 3
        squareFade = 3

        n = normalize normalCamspace
        l = normalize lightDir 
        lightDist = length $ lightPos - pworld
        lightFade = lightPower / (linearFade * lightDist + squareFade * lightDist * lightDist)

        lambertian = min (max (n `dot` l) 0) 1
        e = normalize eyeDirCamspace 
        r = reflect (l *! (-1)) n 
        cosAlpha = max 0 (min 1 $ e `dot` r) 
        specular = if lambertian <= 0 then 0 else pow cosAlpha shininess

        colorLinear = ambientColor + diffuseColor *! (lambertian * lightFade) + specColor *! (specular * lightFade)